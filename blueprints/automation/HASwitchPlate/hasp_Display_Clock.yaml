blueprint:
  name: HASPone p[x].b[y] displays a clock
  description: '

    ## Blueprint Version: `1.05.00`


    # Description


    A HASPone button displays a clock with configurable text options.


    ![Preview](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/hasp_Display_Clock.png)


    ## HASPone Page and Button Reference


    The images below show each available HASPone page along with the layout of available
    button objects.


    <details>


    | Page 0 | Pages 1-3 | Pages 4-5 |

    |--------|-----------|-----------|

    | ![Page 0](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p0_Init_Screen.png)
    | ![Pages 1-3](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p1-p3_4buttons.png)
    | ![Pages 4-5](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p4-p5_3sliders.png)
    |


    | Page 6 | Page 7 | Page 8 |

    |--------|--------|--------|

    | ![Page 6](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p6_8buttons.png)
    | ![Page 7](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p7_12buttons.png)
    | ![Page 8](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p8_5buttons+1slider.png)
    |


    | Page 9 | Page 10 | Page 11 |

    |--------|---------|---------|

    | ![Page 9](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p9_9buttons.png)
    | ![Page 10](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p10_5buttons.png)
    | ![Page 11](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p11_1button+1slider.png)


    </details>


    ## HASPone Font Reference


    <details>


    The Nextion display supports monospaced and proportional fonts.  For monospace
    fonts, the HASPone project includes [Consolas](https://docs.microsoft.com/en-us/typography/font-list/consolas)
    monospace in 4 sizes, [Webdings](https://en.wikipedia.org/wiki/Webdings#Character_set)
    in 1 size, and [Google''s "Noto Sans"](https://github.com/googlefonts/noto-fonts)
    proportional in 5 sizes


    | Font | Name              | Characters per line | Lines per button |

    | :--- | :---------------- | :-------------------| :--------------- |

    | 0    | Consolas 24       | 20 characters       | 2 lines          |

    | 1    | Consolas 32       | 15 characters       | 2 lines          |

    | 2    | Consolas 48       | 10 characters       | 1 line           |

    | 3    | Consolas 80       | 6 characters        | 1 line           |

    | 4    | Webdings 56       | 8 characters        | 1 line           |

    | 5    | Noto Sans 24      | Proportional        | 2 lines          |

    | 6    | Noto Sans 32      | Proportional        | 2 lines          |

    | 7    | Noto Sans 48      | Proportional        | 1 line           |

    | 8    | Noto Sans 64      | Proportional        | 1 line           |

    | 9    | Noto Sans 80      | Proportional        | 1 line           |

    | 10   | Noto Sans Bold 80 | Proportional        | 1 line           |


    ### Icons


    Fonts 5-10 also include [1400+ icons which you can copy and paste from here](https://htmlpreview.github.io/?https://github.com/HASwitchPlate/HASPone/blob/main/images/hasp-fontawesome5.html)


    ### Font examples


    ![HASPone Fonts 0-3](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_Fonts_0-3.png)
    ![HASPone Fonts 4-7](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_Fonts_4-7.png)
    ![HASPone Fonts 8-10](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_Fonts_8-10.png)


    </details>

    '
  domain: automation
  input:
    haspdevice:
      name: HASPone Device
      description: Select the HASPone device
      selector:
        device:
          integration: mqtt
          manufacturer: HASwitchPlate
          model: HASPone v1.0.0
          multiple: false
    hasppage:
      name: HASPone Page
      description: Select the HASPone page (1-11) for the clock. Refer to the HASPone
        Page and Button reference above.
      default: 1
      selector:
        number:
          min: 1.0
          max: 11.0
          mode: slider
          unit_of_measurement: page
          step: 1.0
    haspbutton:
      name: HASPone Button
      description: Select the HASPone button (4-15) for the clock. Refer to the HASPone
        Page and Button reference above.
      default: 4
      selector:
        number:
          min: 4.0
          max: 15.0
          mode: slider
          unit_of_measurement: button
          step: 1.0
    font_select:
      name: Clock Font
      description: Select the font for the clock.  Refer to the HASPone Font reference
        above.
      default: 8 - Noto Sans 64
      selector:
        select:
          options:
          - 0 - Consolas 24
          - 1 - Consolas 32
          - 2 - Consolas 48
          - 3 - Consolas 80
          - 4 - Webdings 56
          - 5 - Noto Sans 24
          - 6 - Noto Sans 32
          - 7 - Noto Sans 48
          - 8 - Noto Sans 64
          - 9 - Noto Sans 80
          - 10 - Noto Sans Bold 80
          custom_value: false
          multiple: false
    xcen_select:
      name: Text horizontal alignment
      description: 'Horizontal text alignment: 0=Left 1=Center 2=Right'
      default: 1 - Centered
      selector:
        select:
          options:
          - 0 - Left aligned
          - 1 - Centered
          - 2 - Right aligned
          custom_value: false
          multiple: false
    ycen_select:
      name: Text vertical alignment
      description: 'Vertical text alignment: 0=Top 1=Center 2=Bottom'
      default: 1 - Centered
      selector:
        select:
          options:
          - 0 - Top aligned
          - 1 - Centered
          - 2 - Bottom aligned
          custom_value: false
          multiple: false
    hour24:
      name: 24 hour clock display
      default: false
      selector:
        boolean: {}
    ampm:
      name: AM/PM suffix
      default: false
      selector:
        boolean: {}
    wrap:
      name: Text wrap
      default: false
      description: Enable line-wrapping text if too long to fit in the button.
      selector:
        boolean: {}
  source_url: https://github.com/HASwitchPlate/HASPone/blob/main/Home_Assistant/blueprints/hasp_Display_Clock.yaml
mode: parallel
max_exceeded: silent
variables:
  haspdevice: !input haspdevice
  haspname: "{%- for entity in device_entities(haspdevice) -%}\n  {%- if entity|regex_search(\"^sensor\\..+_sensor(?:_\\d+|)$\")
    -%}\n    {{- entity|regex_replace(find=\"^sensor\\.\", replace=\"\", ignorecase=true)|regex_replace(find=\"_sensor(?:_\\d+|)$\",
    replace=\"\", ignorecase=true) -}}\n  {%- endif -%}\n{%- endfor -%}"
  haspsensor: "{%- for entity in device_entities(haspdevice) -%}\n  {%- if entity|regex_search(\"^sensor\\..+_sensor(?:_\\d+|)$\")
    -%}\n    {{ entity }}\n  {%- endif -%}\n{%- endfor -%}"
  hasppage: !input hasppage
  haspbutton: !input haspbutton
  font_select: !input font_select
  font: '{{ font_select.split(" - ")[0] | int }}'
  xcen_select: !input xcen_select
  xcen: '{{ xcen_select.split(" - ")[0] | int }}'
  ycen_select: !input ycen_select
  ycen: '{{ ycen_select.split(" - ")[0] | int }}'
  hour24: !input hour24
  ampm: !input ampm
  wrap: !input wrap
  isbr: '{% if wrap == true %}1{% else %}0{% endif %}'
  haspobject: '{{ "p[" ~ hasppage ~ "].b[" ~ haspbutton ~ "]" }}'
  commandtopic: '{{ "hasp/" ~ haspname ~ "/command/" ~ haspobject }}'
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  statetopic: '{{ "hasp/" ~ haspname ~ "/state" }}'
  jsoncommandtopic: '{{ "hasp/" ~ haspname ~ "/command/json" }}'
  text: '{%- if hour24 == true -%}{%- set hourformat="%-H" -%}{%- else %}{%- set hourformat="%I"
    -%}{%- endif -%}{{(now().strftime(hourformat)|int)~now().strftime(":%M")}} {%
    if ampm == true %}{{now().strftime("%p")|lower}}{% endif %}'
  selectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb"
    }}'
  unselectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb"
    }}'
  selectedfg: "{%- set color = namespace() -%} {%- for entity in device_entities(haspdevice)
    -%}\n  {%- if entity|regex_search(\"^light\\..*_selected_foreground_color(?:_\\d+|)$\")
    -%}\n    {%- set color.source=entity -%}\n  {%- endif -%}\n{%- endfor -%} {%-
    set brightness = state_attr(color.source, \"brightness\")|int(default=255) / 255
    -%} {%- set red=(state_attr(color.source, \"rgb_color\")[0] * brightness)|int(default=0)
    -%} {%- set green=(state_attr(color.source, \"rgb_color\")[1] * brightness)|int(default=0)
    -%} {%- set blue=(state_attr(color.source, \"rgb_color\")[2] * brightness)|int(default=0)
    -%} {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int
    }}"
  selectedbg: "{%- set color = namespace() -%} {%- for entity in device_entities(haspdevice)
    -%}\n  {%- if entity|regex_search(\"^light\\..*_selected_background_color(?:_\\d+|)$\")
    -%}\n    {%- set color.source=entity -%}\n  {%- endif -%}\n{%- endfor -%} {%-
    set brightness = state_attr(color.source, \"brightness\")|int(default=255) / 255
    -%} {%- set red=(state_attr(color.source, \"rgb_color\")[0] * brightness)|int(default=0)
    -%} {%- set green=(state_attr(color.source, \"rgb_color\")[1] * brightness)|int(default=0)
    -%} {%- set blue=(state_attr(color.source, \"rgb_color\")[2] * brightness)|int(default=0)
    -%} {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int
    }}"
  unselectedfg: "{%- set color = namespace() -%} {%- for entity in device_entities(haspdevice)
    -%}\n  {%- if entity|regex_search(\"^light\\..*_unselected_foreground_color(?:_\\d+|)$\")
    -%}\n    {%- set color.source=entity -%}\n  {%- endif -%}\n{%- endfor -%} {%-
    set brightness = state_attr(color.source, \"brightness\")|int(default=255) / 255
    -%} {%- set red=(state_attr(color.source, \"rgb_color\")[0] * brightness)|int(default=0)
    -%} {%- set green=(state_attr(color.source, \"rgb_color\")[1] * brightness)|int(default=0)
    -%} {%- set blue=(state_attr(color.source, \"rgb_color\")[2] * brightness)|int(default=0)
    -%} {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int
    }}"
  unselectedbg: "{%- set color = namespace() -%} {%- for entity in device_entities(haspdevice)
    -%}\n  {%- if entity|regex_search(\"^light\\..*_unselected_background_color(?:_\\d+|)$\")
    -%}\n    {%- set color.source=entity -%}\n  {%- endif -%}\n{%- endfor -%} {%-
    set brightness = state_attr(color.source, \"brightness\")|int(default=255) / 255
    -%} {%- set red=(state_attr(color.source, \"rgb_color\")[0] * brightness)|int(default=0)
    -%} {%- set green=(state_attr(color.source, \"rgb_color\")[1] * brightness)|int(default=0)
    -%} {%- set blue=(state_attr(color.source, \"rgb_color\")[2] * brightness)|int(default=0)
    -%} {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int
    }}"
trigger_variables:
  haspdevice: !input haspdevice
  haspname: "{%- for entity in device_entities(haspdevice) -%}\n  {%- if entity|regex_search(\"^sensor\\..+_sensor(?:_\\d+|)$\")
    -%}\n    {{- entity|regex_replace(find=\"^sensor\\.\", replace=\"\", ignorecase=true)|regex_replace(find=\"_sensor(?:_\\d+|)$\",
    replace=\"\", ignorecase=true) -}}\n  {%- endif -%}\n{%- endfor -%}"
  haspsensor: "{%- for entity in device_entities(haspdevice) -%}\n  {%- if entity|regex_search(\"^sensor\\..+_sensor(?:_\\d+|)$\")
    -%}\n    {{ entity }}\n  {%- endif -%}\n{%- endfor -%}"
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  selectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb"
    }}'
  unselectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb"
    }}'
trigger:
- platform: time_pattern
  seconds: 0
- platform: template
  value_template: '{{ is_state(haspsensor, ''ON'') }}'
- platform: homeassistant
  event: start
- platform: mqtt
  topic: '{{selectedfgtopic}}'
- platform: mqtt
  topic: '{{selectedbgtopic}}'
- platform: mqtt
  topic: '{{unselectedfgtopic}}'
- platform: mqtt
  topic: '{{unselectedbgtopic}}'
condition:
- condition: template
  value_template: '{{ is_state(haspsensor, ''ON'') }}'
action:
- choose:
  - conditions:
    - condition: template
      value_template: "{{-\n  (trigger is not defined)\nor\n  (trigger.platform is
        none)\nor\n  ((trigger.platform == 'homeassistant') and (trigger.event ==
        'start'))\nor\n  ((trigger.platform == 'template') and (trigger.entity_id
        == haspsensor) and (trigger.to_state.state == 'ON'))\n-}}"
    sequence:
    - service: mqtt.publish
      data:
        topic: '{{jsoncommandtopic}}'
        payload: '["{{haspobject}}.font={{font}}", "{{haspobject}}.xcen={{xcen}}",
          "{{haspobject}}.ycen={{ycen}}", "{{haspobject}}.isbr={{isbr}}", "{{haspobject}}.pco={{selectedfg}}",
          "{{haspobject}}.bco={{selectedbg}}", "{{haspobject}}.pco2={{unselectedfg}}",
          "{{haspobject}}.bco2={{unselectedbg}}", "{{haspobject}}.txt=\"{{text}}\""]'
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == ''time_pattern'' }}'
    sequence:
    - service: mqtt.publish
      data:
        topic: '{{commandtopic}}.txt'
        payload: '"{{text}}"'
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == ''mqtt'' and trigger.topic == selectedfgtopic
        }}'
    sequence:
    - service: mqtt.publish
      data:
        topic: '{{commandtopic}}.pco'
        payload: '{{trigger.payload}}'
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == ''mqtt'' and trigger.topic == selectedbgtopic
        }}'
    sequence:
    - service: mqtt.publish
      data:
        topic: '{{commandtopic}}.bco'
        payload: '{{trigger.payload}}'
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == ''mqtt'' and trigger.topic == unselectedfgtopic
        }}'
    sequence:
    - service: mqtt.publish
      data:
        topic: '{{commandtopic}}.pco2'
        payload: '{{trigger.payload}}'
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == ''mqtt'' and trigger.topic == unselectedbgtopic
        }}'
    sequence:
    - service: mqtt.publish
      data:
        topic: '{{commandtopic}}.bco2'
        payload: '{{trigger.payload}}'
